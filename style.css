#logo{
    width: 475px;
    animation: logomove 5s;
}

@keyframes logomove{
    from{width: 25px; opacity: 0;}
    to {width:475px;opacity: 1;}
}

body {
    font-family: 'Poppins', serif;
    background-image: url("../images/concrete_seamless.png");
    background-color: #f1f1f1;
}

header{
    display: flex;
    flex-direction: column;
    align-items: center;
}

/* Style the links so that they have the same color even after they have been visited. This is a “challenge” problem. You should not give or receive help when completing it. */

.nav_links a{
    color: #0000ff;
}

a nav_links:visited{
    color:inherit;
}

.card > header{
    background: #288088;
    border: solid 2px #45ADAD;
    padding: 20px 0 20px 0;
    border-radius: 50px 50px 0px 0px;

}

.card{
    border-radius: 50px 50px 0px 0px ;
    flex-basis: 450px;
}
/* Edit the css for the card class to match our example.  Achieve this by using a flex-property to specify an initial “size” of 450px.  You need to think about this from a “flex” perspective and realize that flex-direction will affect the size of the elements.  You can see that in the mobile view they all have the same width. 


Edit the css for the pricing class to match our example.  You should use flex and the cards should be centered both horizontally and vertically. */

.pricing{
    display: flex;
    flex-flow: row wrap;
    justify-content: center; 
}

.card{ 
    flex-direction: column;
    width: 450px;
    align-content: center;
}

/* Style the images in the gallery class.  These elements will have a solid 10px border with a color of #50C7C7, 10px margin on all four sides and a width of 300px.  */

.gallery img{
    border: solid 10px #50C7C7;
    margin: 10px;
    width: 300px;
    flex-wrap: wrap;
    align-content: center;
}

.gallery{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
}

@media screen and (min-width: 900px){
header {
    display: flex;
    flex-flow: row;
    justify-content: space-between;
    
}
.nav_links{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}
/* Edit the css for the pricing and card classes to match our example.  Part of achieving this is by using a flex-property to specify a “size” of 275px.  Notice that the elements do not have the same height, but do have the same width. */

.card{
    flex-basis: 275px;
    order: 0;
}

.pricing{
    align-items: center;
    order: -1;
}

/* Modify the first header (the one not inside main) so that it remains visible at the top of the screen even as we scroll down.  Make sure that it is always visible.   You can see an example of this in the video and in the screenshot at 1200px when scrolled. */

body > header{
    position: sticky;
    top: 0;
    order: -2;
}

} 

@media (prefers-reduced-motion) {
    #logo{
        animation-name: dissolve;
    }
}



/* Change the font on your body to :Arial with a backup value of Helvetica */
/* The background image should be removed.  */
/* Edit the nav/nav_links elements so that they are spaced according to the image above. */
/* Edit the pricing class so that the elements align along the bottom.   As long as it aligns along the bottom we don't care if the cards aren't the same height. */
/* The card elements should have a solid border 2px of #45ADDD and use flex-basis of 325px.  */
/* No part of the gallery should be visible. */
/* Without using list-style-type add the thumbs up entity as shown in the cards.   */

@media print{
    body{
        font-family: Arial, Helvetica;
        background-image: none;}
    .pricing{
        flex-direction: row;
        align-items: flex-end;
    }
    header {
        display: flex;
        flex-flow: row wrap;
        justify-content: center;
    }
    .nav_links{
        display: flex;
        flex-direction: row;
        justify-content: space-around;}
    
    nav {
        width: 100%;
    }
    .card{
        border: solid 2px #45ADDD;
        flex-basis: 325px;
    }
    .gallery, #gallery {
        display: none;

    }
    

   .card li:nth-child(2)::after {
        content: ' \1F44D';}
    

}